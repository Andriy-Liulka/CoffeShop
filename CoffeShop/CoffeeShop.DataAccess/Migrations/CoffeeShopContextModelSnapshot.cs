// <auto-generated />
using System;
using CoffeeShop.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoffeeShop.DataAccess.Migrations
{
    [DbContext(typeof(CoffeeShopContext))]
    partial class CoffeeShopContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0-preview.6.22329.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CoffeeShop.Domain.Entities.BonusCoffee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("BonusPrice")
                        .HasColumnType("bigint");

                    b.Property<long?>("CoffeeId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long?>("VolumeId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CoffeeId");

                    b.HasIndex("VolumeId");

                    b.ToTable("BonusCoffees", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BonusPrice = 200L,
                            CoffeeId = 1L,
                            VolumeId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            BonusPrice = 250L,
                            CoffeeId = 7L,
                            VolumeId = 3L
                        },
                        new
                        {
                            Id = 3L,
                            BonusPrice = 310L,
                            CoffeeId = 4L,
                            VolumeId = 5L
                        },
                        new
                        {
                            Id = 4L,
                            BonusPrice = 435L,
                            CoffeeId = 2L,
                            VolumeId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            BonusPrice = 500L,
                            CoffeeId = 7L,
                            VolumeId = 6L
                        });
                });

            modelBuilder.Entity("CoffeeShop.Domain.Entities.Coffee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("BonusesSize")
                        .HasColumnType("bigint");

                    b.Property<int>("IsMilk")
                        .HasColumnType("INT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Coffees", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BonusesSize = 0L,
                            IsMilk = 1,
                            Name = "Latte",
                            Provider = "United States"
                        },
                        new
                        {
                            Id = 2L,
                            BonusesSize = 10L,
                            IsMilk = 0,
                            Name = "Americano",
                            Provider = "North USA"
                        },
                        new
                        {
                            Id = 3L,
                            BonusesSize = 6L,
                            IsMilk = 1,
                            Name = "Capuchino",
                            Provider = "Italia"
                        },
                        new
                        {
                            Id = 4L,
                            BonusesSize = 15L,
                            IsMilk = 0,
                            Name = "Ekspresso",
                            Provider = "USA"
                        },
                        new
                        {
                            Id = 5L,
                            BonusesSize = 20L,
                            IsMilk = 1,
                            Name = "Flat-White",
                            Provider = "Australia"
                        },
                        new
                        {
                            Id = 6L,
                            BonusesSize = 30L,
                            IsMilk = 0,
                            Name = "Mokachino",
                            Provider = "USA"
                        },
                        new
                        {
                            Id = 7L,
                            BonusesSize = 3L,
                            IsMilk = 0,
                            Name = "Black coffee",
                            Provider = "Efiopia"
                        });
                });

            modelBuilder.Entity("CoffeeShop.Domain.Entities.Discount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<float>("Percent")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Discounts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Percent = 40f
                        },
                        new
                        {
                            Id = 2L,
                            Percent = 30f
                        },
                        new
                        {
                            Id = 3L,
                            Percent = 65f
                        },
                        new
                        {
                            Id = 4L,
                            Percent = 24f
                        },
                        new
                        {
                            Id = 5L,
                            Percent = 37f
                        });
                });

            modelBuilder.Entity("CoffeeShop.Domain.Entities.Identity.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Customer"
                        });
                });

            modelBuilder.Entity("CoffeeShop.Domain.Entities.Identity.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("AvatarImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Bonuses")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("RoleId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("CoffeeShop.Domain.Entities.MtM_IntermediateEntities.DiscountCoffee", b =>
                {
                    b.Property<long>("CoffeeId")
                        .HasColumnType("bigint");

                    b.Property<long>("DiscountId")
                        .HasColumnType("bigint");

                    b.HasKey("CoffeeId", "DiscountId");

                    b.HasIndex("DiscountId");

                    b.ToTable("DiscountCoffees", (string)null);

                    b.HasData(
                        new
                        {
                            CoffeeId = 1L,
                            DiscountId = 1L
                        },
                        new
                        {
                            CoffeeId = 2L,
                            DiscountId = 5L
                        },
                        new
                        {
                            CoffeeId = 5L,
                            DiscountId = 4L
                        },
                        new
                        {
                            CoffeeId = 6L,
                            DiscountId = 2L
                        },
                        new
                        {
                            CoffeeId = 3L,
                            DiscountId = 3L
                        },
                        new
                        {
                            CoffeeId = 7L,
                            DiscountId = 2L
                        });
                });

            modelBuilder.Entity("CoffeeShop.Domain.Entities.MtM_IntermediateEntities.OrderVolumeCoffee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CoffeetId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasColumnType("DECIMAL(15,7)");

                    b.Property<long>("VolumeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CoffeetId");

                    b.HasIndex("OrderId");

                    b.HasIndex("VolumeId");

                    b.ToTable("OrderVolumeCoffees", (string)null);
                });

            modelBuilder.Entity("CoffeeShop.Domain.Entities.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("DeliveryWay")
                        .IsRequired()
                        .HasColumnType("VARCHAR(10)");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("RegistrationDate")
                        .HasColumnType("DATETIMEOFFSET(4)");

                    b.Property<long>("TotalBonusesSize")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("DECIMAL(20,10)");

                    b.Property<long?>("UserId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("CoffeeShop.Domain.Entities.Volume", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Volumes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Capacity = 200,
                            Name = "Small"
                        },
                        new
                        {
                            Id = 2L,
                            Capacity = 250,
                            Name = "Small"
                        },
                        new
                        {
                            Id = 3L,
                            Capacity = 300,
                            Name = "Average"
                        },
                        new
                        {
                            Id = 4L,
                            Capacity = 350,
                            Name = "Average"
                        },
                        new
                        {
                            Id = 5L,
                            Capacity = 450,
                            Name = "Large"
                        },
                        new
                        {
                            Id = 6L,
                            Capacity = 500,
                            Name = "Large"
                        });
                });

            modelBuilder.Entity("CoffeeShop.Domain.Entities.BonusCoffee", b =>
                {
                    b.HasOne("CoffeeShop.Domain.Entities.Coffee", "Coffee")
                        .WithMany("BonusCoffees")
                        .HasForeignKey("CoffeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeShop.Domain.Entities.Volume", "Volume")
                        .WithMany("BonusCoffees")
                        .HasForeignKey("VolumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coffee");

                    b.Navigation("Volume");
                });

            modelBuilder.Entity("CoffeeShop.Domain.Entities.Identity.User", b =>
                {
                    b.HasOne("CoffeeShop.Domain.Entities.Identity.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CoffeeShop.Domain.Entities.MtM_IntermediateEntities.DiscountCoffee", b =>
                {
                    b.HasOne("CoffeeShop.Domain.Entities.Coffee", "Coffee")
                        .WithMany("DiscountCoffees")
                        .HasForeignKey("CoffeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeShop.Domain.Entities.Discount", "Discount")
                        .WithMany("DiscountCoffees")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coffee");

                    b.Navigation("Discount");
                });

            modelBuilder.Entity("CoffeeShop.Domain.Entities.MtM_IntermediateEntities.OrderVolumeCoffee", b =>
                {
                    b.HasOne("CoffeeShop.Domain.Entities.Coffee", "Coffee")
                        .WithMany("OrderVolumeCoffees")
                        .HasForeignKey("CoffeetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeShop.Domain.Entities.Order", "Order")
                        .WithMany("OrderVolumeCoffees")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeShop.Domain.Entities.Volume", "Volume")
                        .WithMany("OrderVolumeCoffees")
                        .HasForeignKey("VolumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coffee");

                    b.Navigation("Order");

                    b.Navigation("Volume");
                });

            modelBuilder.Entity("CoffeeShop.Domain.Entities.Order", b =>
                {
                    b.HasOne("CoffeeShop.Domain.Entities.Identity.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoffeeShop.Domain.Entities.Coffee", b =>
                {
                    b.Navigation("BonusCoffees");

                    b.Navigation("DiscountCoffees");

                    b.Navigation("OrderVolumeCoffees");
                });

            modelBuilder.Entity("CoffeeShop.Domain.Entities.Discount", b =>
                {
                    b.Navigation("DiscountCoffees");
                });

            modelBuilder.Entity("CoffeeShop.Domain.Entities.Identity.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CoffeeShop.Domain.Entities.Identity.User", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CoffeeShop.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderVolumeCoffees");
                });

            modelBuilder.Entity("CoffeeShop.Domain.Entities.Volume", b =>
                {
                    b.Navigation("BonusCoffees");

                    b.Navigation("OrderVolumeCoffees");
                });
#pragma warning restore 612, 618
        }
    }
}
