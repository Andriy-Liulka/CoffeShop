// <auto-generated />
using System;
using CoffeeShop.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoffeeShop.DataAccess.Migrations
{
    [DbContext(typeof(CoffeeShopContext))]
    [Migration("20220803122601_TestMegration2")]
    partial class TestMegration2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0-preview.6.22329.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CoffeeShop.Domain.Entities.BonusCoffee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("BonusPrice")
                        .HasColumnType("bigint");

                    b.Property<long>("CoffeeId")
                        .HasColumnType("bigint");

                    b.Property<long>("VolumeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CoffeeId");

                    b.HasIndex("VolumeId");

                    b.ToTable("BonusCoffees", (string)null);
                });

            modelBuilder.Entity("CoffeeShop.Domain.Entities.Coffee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("BonusesSize")
                        .HasColumnType("bigint");

                    b.Property<int>("IsMilk")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("DECIMAL(15,7)");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Coffees", (string)null);
                });

            modelBuilder.Entity("CoffeeShop.Domain.Entities.Discount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<float>("Percent")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Discounts", (string)null);
                });

            modelBuilder.Entity("CoffeeShop.Domain.Entities.Identity.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("CoffeeShop.Domain.Entities.Identity.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("AvatarImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Bonuses")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("CoffeeShop.Domain.Entities.MtM_IntermediateEntities.Discount_Coffee", b =>
                {
                    b.Property<long>("CoffeetId")
                        .HasColumnType("bigint");

                    b.Property<long>("DiscountId")
                        .HasColumnType("bigint");

                    b.HasKey("CoffeetId", "DiscountId");

                    b.HasIndex("DiscountId");

                    b.ToTable("Discount_Coffees", (string)null);
                });

            modelBuilder.Entity("CoffeeShop.Domain.Entities.MtM_IntermediateEntities.Order_Volume_Coffee", b =>
                {
                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<long>("VolumeId")
                        .HasColumnType("bigint");

                    b.Property<long>("CoffeetId")
                        .HasColumnType("bigint");

                    b.HasKey("OrderId", "VolumeId", "CoffeetId");

                    b.HasIndex("CoffeetId");

                    b.HasIndex("VolumeId");

                    b.ToTable("Order_Volume_Coffees", (string)null);
                });

            modelBuilder.Entity("CoffeeShop.Domain.Entities.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("DeliveryWay")
                        .IsRequired()
                        .HasColumnType("VARCHAR(10)");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("RegistrationDate")
                        .HasColumnType("DATETIMEOFFSET(4)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("DECIMAL(20,10)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("CoffeeShop.Domain.Entities.Volume", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Volumes", (string)null);
                });

            modelBuilder.Entity("CoffeeShop.Domain.Entities.BonusCoffee", b =>
                {
                    b.HasOne("CoffeeShop.Domain.Entities.Coffee", "Coffee")
                        .WithMany("BonusCoffees")
                        .HasForeignKey("CoffeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeShop.Domain.Entities.Volume", "Volume")
                        .WithMany("BonusCoffees")
                        .HasForeignKey("VolumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coffee");

                    b.Navigation("Volume");
                });

            modelBuilder.Entity("CoffeeShop.Domain.Entities.Identity.User", b =>
                {
                    b.HasOne("CoffeeShop.Domain.Entities.Identity.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CoffeeShop.Domain.Entities.MtM_IntermediateEntities.Discount_Coffee", b =>
                {
                    b.HasOne("CoffeeShop.Domain.Entities.Coffee", "Coffee")
                        .WithMany("Discount_Coffees")
                        .HasForeignKey("CoffeetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeShop.Domain.Entities.Discount", "Discount")
                        .WithMany("Discount_Coffees")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coffee");

                    b.Navigation("Discount");
                });

            modelBuilder.Entity("CoffeeShop.Domain.Entities.MtM_IntermediateEntities.Order_Volume_Coffee", b =>
                {
                    b.HasOne("CoffeeShop.Domain.Entities.Coffee", "Coffee")
                        .WithMany("Order_Volume_Coffees")
                        .HasForeignKey("CoffeetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeShop.Domain.Entities.Order", "Order")
                        .WithMany("Order_Volume_Coffees")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeShop.Domain.Entities.Volume", "Volume")
                        .WithMany("Order_Volume_Coffees")
                        .HasForeignKey("VolumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coffee");

                    b.Navigation("Order");

                    b.Navigation("Volume");
                });

            modelBuilder.Entity("CoffeeShop.Domain.Entities.Order", b =>
                {
                    b.HasOne("CoffeeShop.Domain.Entities.Identity.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoffeeShop.Domain.Entities.Coffee", b =>
                {
                    b.Navigation("BonusCoffees");

                    b.Navigation("Discount_Coffees");

                    b.Navigation("Order_Volume_Coffees");
                });

            modelBuilder.Entity("CoffeeShop.Domain.Entities.Discount", b =>
                {
                    b.Navigation("Discount_Coffees");
                });

            modelBuilder.Entity("CoffeeShop.Domain.Entities.Identity.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CoffeeShop.Domain.Entities.Identity.User", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CoffeeShop.Domain.Entities.Order", b =>
                {
                    b.Navigation("Order_Volume_Coffees");
                });

            modelBuilder.Entity("CoffeeShop.Domain.Entities.Volume", b =>
                {
                    b.Navigation("BonusCoffees");

                    b.Navigation("Order_Volume_Coffees");
                });
#pragma warning restore 612, 618
        }
    }
}
